Pone <- function(n, k, strategy, nreps) {
  N <- 2*n
  prisonernumber<-k
  prisoners <- 1:N
  nSuccess <- 0
  boxes <- sample(prisoners)
  box_to_open <- prisonernumber
  numberofattempts <- 1
  if (strategy==1) {
    for (r in 1:nreps) {
      while(prisonernumber != boxes[box_to_open] && numberofattempts < n) {
        box_to_open = boxes[box_to_open]
        numberofattempts <- numberofattempts+1
      }
      if (prisonernumber == boxes[box_to_open]) {
        nSuccess <- nSuccess + 1
      }
    }
  }
  return(nSuccess/nreps)
  
}

Pone(50,32,2,1000)


Pall <- function(n, strategy, nreps) {
  nFoundCards <- 0
  nSuccesses <- 0
  for (r in 1:nreps) {
    seed <- sample(1:100000, 1)
    nFoundCards <- 0
    for(prisoner in 1:(2*n)) {
      set.seed(seed)
      nFoundCards <- nFoundCards + Pone(n, prisoner, strategy, 1)
    }
    if (nFoundCards == 2*n) {
      nSuccesses <- nSuccesses + 1
    }
  }
  nSuccesses/nreps
}

Pall(50, 1, nreps=1000)
